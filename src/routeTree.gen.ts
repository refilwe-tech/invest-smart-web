/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersImport } from './routes/users'
import { Route as ReportsImport } from './routes/reports'
import { Route as RegisterImport } from './routes/register'
import { Route as ProfileImport } from './routes/profile'
import { Route as LoginImport } from './routes/login'
import { Route as InvestmentsImport } from './routes/investments'
import { Route as InvestImport } from './routes/invest'
import { Route as HomeImport } from './routes/home'
import { Route as AdminsImport } from './routes/admins'
import { Route as IndexImport } from './routes/index'
import { Route as UsersNewImport } from './routes/users.new'
import { Route as AdminsNewImport } from './routes/admins.new'
import { Route as UsersUserIdEditImport } from './routes/users.$userId.edit'

// Create/Update Routes

const UsersRoute = UsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const ReportsRoute = ReportsImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const InvestmentsRoute = InvestmentsImport.update({
  id: '/investments',
  path: '/investments',
  getParentRoute: () => rootRoute,
} as any)

const InvestRoute = InvestImport.update({
  id: '/invest',
  path: '/invest',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const AdminsRoute = AdminsImport.update({
  id: '/admins',
  path: '/admins',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersNewRoute = UsersNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => UsersRoute,
} as any)

const AdminsNewRoute = AdminsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AdminsRoute,
} as any)

const UsersUserIdEditRoute = UsersUserIdEditImport.update({
  id: '/$userId/edit',
  path: '/$userId/edit',
  getParentRoute: () => UsersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admins': {
      id: '/admins'
      path: '/admins'
      fullPath: '/admins'
      preLoaderRoute: typeof AdminsImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/invest': {
      id: '/invest'
      path: '/invest'
      fullPath: '/invest'
      preLoaderRoute: typeof InvestImport
      parentRoute: typeof rootRoute
    }
    '/investments': {
      id: '/investments'
      path: '/investments'
      fullPath: '/investments'
      preLoaderRoute: typeof InvestmentsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/admins/new': {
      id: '/admins/new'
      path: '/new'
      fullPath: '/admins/new'
      preLoaderRoute: typeof AdminsNewImport
      parentRoute: typeof AdminsImport
    }
    '/users/new': {
      id: '/users/new'
      path: '/new'
      fullPath: '/users/new'
      preLoaderRoute: typeof UsersNewImport
      parentRoute: typeof UsersImport
    }
    '/users/$userId/edit': {
      id: '/users/$userId/edit'
      path: '/$userId/edit'
      fullPath: '/users/$userId/edit'
      preLoaderRoute: typeof UsersUserIdEditImport
      parentRoute: typeof UsersImport
    }
  }
}

// Create and export the route tree

interface AdminsRouteChildren {
  AdminsNewRoute: typeof AdminsNewRoute
}

const AdminsRouteChildren: AdminsRouteChildren = {
  AdminsNewRoute: AdminsNewRoute,
}

const AdminsRouteWithChildren =
  AdminsRoute._addFileChildren(AdminsRouteChildren)

interface UsersRouteChildren {
  UsersNewRoute: typeof UsersNewRoute
  UsersUserIdEditRoute: typeof UsersUserIdEditRoute
}

const UsersRouteChildren: UsersRouteChildren = {
  UsersNewRoute: UsersNewRoute,
  UsersUserIdEditRoute: UsersUserIdEditRoute,
}

const UsersRouteWithChildren = UsersRoute._addFileChildren(UsersRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admins': typeof AdminsRouteWithChildren
  '/home': typeof HomeRoute
  '/invest': typeof InvestRoute
  '/investments': typeof InvestmentsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/reports': typeof ReportsRoute
  '/users': typeof UsersRouteWithChildren
  '/admins/new': typeof AdminsNewRoute
  '/users/new': typeof UsersNewRoute
  '/users/$userId/edit': typeof UsersUserIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admins': typeof AdminsRouteWithChildren
  '/home': typeof HomeRoute
  '/invest': typeof InvestRoute
  '/investments': typeof InvestmentsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/reports': typeof ReportsRoute
  '/users': typeof UsersRouteWithChildren
  '/admins/new': typeof AdminsNewRoute
  '/users/new': typeof UsersNewRoute
  '/users/$userId/edit': typeof UsersUserIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admins': typeof AdminsRouteWithChildren
  '/home': typeof HomeRoute
  '/invest': typeof InvestRoute
  '/investments': typeof InvestmentsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/reports': typeof ReportsRoute
  '/users': typeof UsersRouteWithChildren
  '/admins/new': typeof AdminsNewRoute
  '/users/new': typeof UsersNewRoute
  '/users/$userId/edit': typeof UsersUserIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admins'
    | '/home'
    | '/invest'
    | '/investments'
    | '/login'
    | '/profile'
    | '/register'
    | '/reports'
    | '/users'
    | '/admins/new'
    | '/users/new'
    | '/users/$userId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admins'
    | '/home'
    | '/invest'
    | '/investments'
    | '/login'
    | '/profile'
    | '/register'
    | '/reports'
    | '/users'
    | '/admins/new'
    | '/users/new'
    | '/users/$userId/edit'
  id:
    | '__root__'
    | '/'
    | '/admins'
    | '/home'
    | '/invest'
    | '/investments'
    | '/login'
    | '/profile'
    | '/register'
    | '/reports'
    | '/users'
    | '/admins/new'
    | '/users/new'
    | '/users/$userId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminsRoute: typeof AdminsRouteWithChildren
  HomeRoute: typeof HomeRoute
  InvestRoute: typeof InvestRoute
  InvestmentsRoute: typeof InvestmentsRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  ReportsRoute: typeof ReportsRoute
  UsersRoute: typeof UsersRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminsRoute: AdminsRouteWithChildren,
  HomeRoute: HomeRoute,
  InvestRoute: InvestRoute,
  InvestmentsRoute: InvestmentsRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  ReportsRoute: ReportsRoute,
  UsersRoute: UsersRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admins",
        "/home",
        "/invest",
        "/investments",
        "/login",
        "/profile",
        "/register",
        "/reports",
        "/users"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admins": {
      "filePath": "admins.tsx",
      "children": [
        "/admins/new"
      ]
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/invest": {
      "filePath": "invest.tsx"
    },
    "/investments": {
      "filePath": "investments.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/reports": {
      "filePath": "reports.tsx"
    },
    "/users": {
      "filePath": "users.tsx",
      "children": [
        "/users/new",
        "/users/$userId/edit"
      ]
    },
    "/admins/new": {
      "filePath": "admins.new.tsx",
      "parent": "/admins"
    },
    "/users/new": {
      "filePath": "users.new.tsx",
      "parent": "/users"
    },
    "/users/$userId/edit": {
      "filePath": "users.$userId.edit.tsx",
      "parent": "/users"
    }
  }
}
ROUTE_MANIFEST_END */
